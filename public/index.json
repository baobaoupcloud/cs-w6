[
{
	"uri": "//localhost:1313/",
	"title": "CS50 Week 6",
	"tags": [],
	"description": "",
	"content": "CS50 Week 6 - Python Overall Welcome to week 6. On this week, we are we are going to work with a higher-level programming language called Python. We will go through these following contents.\nContent Python and C Data types and Syntax Conditionals Loops Functions Data Structures Libraries Exceptions Object-oriented Programming Command-line Arguments "
},
{
	"uri": "//localhost:1313/1-differences-between-python-and-c/",
	"title": "Python and C",
	"tags": [],
	"description": "",
	"content": " No Need to Compile: In C, we must first compile the code before running it. In Python, you can run the script directly without compiling, making it faster to test and debug. Simpler Syntax: Python removes unnecessary syntax, like semicolons ; and curly braces {} found in C.\n// C Code #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; } # Python Code print(\u0026#34;Hello, world!\u0026#34;) Automatic Memory Management: In C, you need to manually allocate and free memory. Python automatically manages memory, reducing errors. Supports Multiple Data Types Easily: Python provides built-in support for data types like lists, dictionaries, strings, and more, which are more complex to implement in C. "
},
{
	"uri": "//localhost:1313/2-data-types-and-syntax/",
	"title": "Data types and Syntax",
	"tags": [],
	"description": "",
	"content": " We don’t need to specify data types like int, float, string. Python automatically understands.\nx = 10 # Integer y = 20.5 # Float name = \u0026#34;John\u0026#34; # String Common Data Types:\nint: Whole numbers. float: Decimal numbers. str: Text. bool: True or False. Basic Syntax\nWe use the print() function to display output. We use the input() function to get input from the user. name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) # Getting input print(f\u0026#34;Hello, {name}\u0026#34;) # Displaying output using an f-string "
},
{
	"uri": "//localhost:1313/3-conditionals/",
	"title": "Conditionals",
	"tags": [],
	"description": "",
	"content": "Conditionals are used to make decisions in our program using if, elif, and else statements.\nx = 5 y = 10 if x \u0026lt; y: print(\u0026#34;x is less than y\u0026#34;) elif x \u0026gt; y: print(\u0026#34;x is greater than y\u0026#34;) else: print(\u0026#34;x is equal to y\u0026#34;) Note: Indentation is critical in Python. Each code block is defined by its indentation. Differences from C:\nNo curly braces {}. No need for parentheses () around the condition. Use a colon : after the condition. "
},
{
	"uri": "//localhost:1313/4-loops/",
	"title": "Loops",
	"tags": [],
	"description": "",
	"content": "Loops are used to repeat a block of code multiple times.\nfor Loop Iterates over a sequence (like a list or range).\nfor i in range(3): print(\u0026#34;Hello!\u0026#34;) # Prints \u0026#34;Hello!\u0026#34; 3 times while Loop Repeats as long as a condition is true.\ni = 0 while i \u0026lt; 3: print(\u0026#34;Hello!\u0026#34;) # Prints \u0026#34;Hello!\u0026#34; 3 times i += 1 # Increment i by 1 each time Difference from C No need for initialization and increment statements within the for loop. Indentation is used instead of curly braces {}. "
},
{
	"uri": "//localhost:1313/5-functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": "Functions Functions are reusable blocks of code that perform a specific task. We define a function using the def keyword.\n# Define function greet def greet(name): print(f\u0026#34;Hello, {name}\u0026#34;) greet(\u0026#34;Alice\u0026#34;) # Calls the function and prints \u0026#34;Hello, Alice\u0026#34; Parameters and Return Values We can pass values to a function and get a result using the return statement.\ndef add(x, y): return x + y result = add(5, 3) # Returns 8 print(result) "
},
{
	"uri": "//localhost:1313/6-data-structures/",
	"title": "Data Structures",
	"tags": [],
	"description": "",
	"content": "Python provides built-in data structures that simplify storing and manipulating data.\n1. Lists Lists are used to store multiple items in a single variable.\nfruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Cherry\u0026#34;] print(fruits[0]) # Outputs: Apple Lists are created using square brackets []. We can add elements using append(). fruits.append(\u0026#34;Orange\u0026#34;) # Adds \u0026#34;Orange\u0026#34; to the list 2. Dictionaries Dictionaries store key-value pairs.\nperson = {\u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 25} print(person[\u0026#34;name\u0026#34;]) # Outputs: Alice Created using curly braces {}. Access values using keys, like person[\u0026quot;name\u0026quot;]. "
},
{
	"uri": "//localhost:1313/7-libraries/",
	"title": "Libraries",
	"tags": [],
	"description": "",
	"content": "Python has a vast collection of libraries that extend its functionality. A library is a collection of pre-written code that we can use to perform common tasks.\nExample: Image Processing Using PIL\nfrom PIL import Image, ImageFilter # Open an image image = Image.open(\u0026#34;example.jpg\u0026#34;) # Apply a blur filter blurred_image = image.filter(ImageFilter.BLUR) # Save the modified image blurred_image.save(\u0026#34;blurred_example.jpg\u0026#34;) Using Third-Party Libraries\nWe can install and use external libraries using the pip command.\npip install face_recognition "
},
{
	"uri": "//localhost:1313/8-exceptions/",
	"title": "Exceptions",
	"tags": [],
	"description": "",
	"content": "Exceptions are errors that occur during the execution of a program. Python handles exceptions using try, except blocks.\ntry: x = int(input(\u0026#34;Enter a number: \u0026#34;)) except ValueError: print(\u0026#34;That\u0026#39;s not a valid number!\u0026#34;) try: The code we want to run. except: The code that runs if an error occurs. "
},
{
	"uri": "//localhost:1313/9-object-oriented-programming/",
	"title": "Object-oriented Programming",
	"tags": [],
	"description": "",
	"content": "Object-oriented Programming (OOP) is a programming paradigm based on the concept of \u0026ldquo;objects\u0026rdquo;. It helps structure code by grouping related properties and behaviors into units (objects), making the code more modular, readable.\nPython supports creating classes and objects to represent real-world entities.\nIn C, we could create a struct where we could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific object, it is known as a method\nFor example, strs in Python have a built-in methods. Therefore, we could modify the code as follows:\n# Logical operators, using lists from cs50 import get_string # Prompt user to agree s = get_string(\u0026#34;Do you agree? \u0026#34;).lower() # Check whether agreed if s.lower() in [\u0026#34;y\u0026#34;, \u0026#34;yes\u0026#34;]: print(\u0026#34;Agreed.\u0026#34;) elif s.lower() in [\u0026#34;n\u0026#34;, \u0026#34;no\u0026#34;]: print(\u0026#34;Not agreed.\u0026#34; Notice how the old value of s is overwritten with the result of s.lower()\n"
},
{
	"uri": "//localhost:1313/10-command-line-arguments/",
	"title": "Command-line Arguments",
	"tags": [],
	"description": "",
	"content": "Command-line arguments allow us to pass inputs to our script through the terminal.\nExample: from sys import argv if len(argv) == 2: print(f\u0026#34;Hello, {argv[1]}\u0026#34;) else: print(\u0026#34;Hello, world\u0026#34;) argv is a list that contains command-line arguments. Use sys.argv[1] to access the first argument. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]