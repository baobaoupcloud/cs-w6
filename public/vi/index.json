[
{
	"uri": "//localhost:1313/vi/",
	"title": "CS50 Tuần 6",
	"tags": [],
	"description": "",
	"content": "CS50 Tuần 6 - Python Tổng quan Chào mừng đến với tuần thứ 6. Ở tuần này, chúng ta sẽ học về một ngôn ngữ lập trình cao cấp hơn là Python. Chúng ta sẽ đi qua các nội dung sau.\nMục lục Python và C Kiểu dữ liệu và Cú pháp Điều kiện Vòng lặp Hàm Cấu trúc dữ liệu Thư viện Ngoại lệ Lập trình hướng đối tượng Đối số dòng lệnh "
},
{
	"uri": "//localhost:1313/vi/1-differences-between-python-and-c/",
	"title": "Python và C",
	"tags": [],
	"description": "",
	"content": "1. Không cần biên dịch\nTrong C, bạn phải biên dịch mã trước khi chạy. Trong Python, bạn có thể chạy trực tiếp tập tin mà không cần biên dịch, giúp việc thử nghiệm và gỡ lỗi nhanh hơn. 2. Cú pháp đơn giản hơn\nPython loại bỏ các cú pháp không cần thiết như dấu chấm phẩy ; và dấu ngoặc nhọn {} thường thấy trong C.\nVí dụ mã trong C:\n// Mã C #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Xin chào!\\n\u0026#34;); return 0; } Còn đây là mã trong Python:\n# Mã Python print(\u0026#34;Xin chào!\u0026#34;) 3. Quản lý bộ nhớ tự động\nTrong C, bạn phải tự cấp phát và giải phóng bộ nhớ. Python tự động quản lý bộ nhớ, giảm thiểu lỗi liên quan đến việc quản lý tài nguyên. 4. Hỗ trợ nhiều kiểu dữ liệu dễ dàng\nPython cung cấp sẵn các kiểu dữ liệu như danh sách (list), từ điển (dictionary), chuỗi ký tự (string),\u0026hellip; giúp việc xử lý trở nên đơn giản hơn so với C, không cần phải triển khai chúng một cách thủ công. "
},
{
	"uri": "//localhost:1313/vi/2-data-types-and-syntax/",
	"title": "Kiểu dữ liệu và Cú pháp",
	"tags": [],
	"description": "",
	"content": "1. Các kiểu dữ liệu trong Python Chúng ta không cần chỉ định kiểu dữ liệu như int, float, string. Python tự động hiểu và xử lý.\nx = 10 # Số nguyên (Integer) y = 20.5 # Số thực (Float) name = \u0026#34;John\u0026#34; # Chuỗi ký tự (String) Các kiểu dữ liệu phổ biến:\nint: Số nguyên. float: Số thập phân. str: Văn bản. bool: Đúng hoặc Sai. Cú pháp cơ bản\nDùng hàm print() để hiển thị kết quả. Dùng hàm input() để lấy dữ liệu đầu vào từ người dùng. name = input(\u0026#34;Tên của bạn là gì? \u0026#34;) # Nhập dữ liệu print(f\u0026#34;Xin chào, {name}\u0026#34;) # Hiển thị kết quả sử dụng f-string "
},
{
	"uri": "//localhost:1313/vi/3-conditionals/",
	"title": "Điều kiện",
	"tags": [],
	"description": "",
	"content": "Câu lệnh điều kiện được dùng để đưa ra quyết định trong chương trình bằng cách sử dụng các từ khóa if, elif, và else.\nx = 5 y = 10 if x \u0026lt; y: print(\u0026#34;x nhỏ hơn y\u0026#34;) elif x \u0026gt; y: print(\u0026#34;x lớn hơn y\u0026#34;) else: print(\u0026#34;x bằng y\u0026#34;) Lưu ý: Thụt đầu dòng là rất quan trọng trong Python. Mỗi khối mã được xác định bằng việc thụt đầu dòng. Khác biệt so với ngôn ngữ C:\nKhông dùng dấu ngoặc nhọn {}. Không cần dấu ngoặc đơn () bao quanh điều kiện. Sử dụng dấu hai chấm : sau điều kiện. 4. Vòng lặp trong Python Vòng lặp được dùng để lặp lại một đoạn mã nhiều lần.\nVòng lặp for Duyệt qua một chuỗi (như danh sách hoặc phạm vi số).\nfor i in range(3): print(\u0026#34;Xin chào!\u0026#34;) # In ra \u0026#34;Xin chào!\u0026#34; 3 lần "
},
{
	"uri": "//localhost:1313/vi/4-loops/",
	"title": "Vòng lặp",
	"tags": [],
	"description": "",
	"content": "Vòng lặp được dùng để lặp lại một đoạn mã nhiều lần.\nVòng lặp for Duyệt qua một chuỗi (như danh sách hoặc phạm vi số).\nfor i in range(3): print(\u0026#34;Xin chào!\u0026#34;) # In ra \u0026#34;Xin chào!\u0026#34; 3 lần Vòng lặp while Lặp lại khi điều kiện là đúng.\ni = 0 while i \u0026lt; 3: print(\u0026#34;Xin chào!\u0026#34;) # In ra \u0026#34;Xin chào!\u0026#34; 3 lần i += 1 # Tăng i thêm 1 mỗi lần lặp "
},
{
	"uri": "//localhost:1313/vi/5-functions/",
	"title": "Hàm",
	"tags": [],
	"description": "",
	"content": "Hàm là những khối mã có thể tái sử dụng và thực hiện một nhiệm vụ cụ thể. Chúng ta khai báo hàm bằng từ khóa def.\n# Định nghĩa hàm chào def chao(name): print(f\u0026#34;Xin chào, {name}\u0026#34;) chao(\u0026#34;Alice\u0026#34;) # Gọi hàm và in ra \u0026#34;Xin chào, Alice\u0026#34; "
},
{
	"uri": "//localhost:1313/vi/6-data-structures/",
	"title": "Cấu trúc dữ liệu",
	"tags": [],
	"description": "",
	"content": "Python cung cấp nhiều cấu trúc dữ liệu tích hợp giúp lưu trữ và xử lý dữ liệu dễ dàng.\n1. Danh sách (List) Danh sách dùng để lưu trữ nhiều mục trong một biến duy nhất.\nfruits = [\u0026#34;Táo\u0026#34;, \u0026#34;Chuối\u0026#34;, \u0026#34;Anh đào\u0026#34;] print(fruits[0]) # Xuất ra: Táo Danh sách được tạo bằng dấu ngoặc vuông []. Có thể thêm phần tử bằng append(). fruits.append(\u0026#34;Cam\u0026#34;) # Thêm \u0026#34;Cam\u0026#34; vào danh sách 2. Từ điển (Dictionary) Từ điển lưu trữ các cặp khóa-giá trị.\nperson = {\u0026#34;ten\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;tuoi\u0026#34;: 25} print(person[\u0026#34;ten\u0026#34;]) # Xuất ra: Alice Tạo từ điển bằng dấu ngoặc nhọn {}. Truy cập giá trị bằng cách sử dụng khóa, như person[\u0026quot;ten\u0026quot;]. "
},
{
	"uri": "//localhost:1313/vi/7-libraries/",
	"title": "Thư viện",
	"tags": [],
	"description": "",
	"content": "Python có một tập hợp lớn các thư viện mở rộng chức năng. Một thư viện là tập hợp mã được viết sẵn mà chúng ta có thể sử dụng để thực hiện các tác vụ thông dụng.\nVí dụ: Xử lý ảnh bằng PIL\nfrom PIL import Image, ImageFilter # Mở một ảnh image = Image.open(\u0026#34;example.jpg\u0026#34;) # Áp dụng bộ lọc làm mờ blurred_image = image.filter(ImageFilter.BLUR) # Lưu ảnh đã chỉnh sửa blurred_image.save(\u0026#34;blurred_example.jpg\u0026#34;) Sử dụng các thư viện bên thứ ba\nChúng ta có thể cài đặt và sử dụng các thư viện bên ngoài bằng lệnh pip.\npip install face_recognition "
},
{
	"uri": "//localhost:1313/vi/8-exceptions/",
	"title": "Ngoại lệ",
	"tags": [],
	"description": "",
	"content": "Ngoại lệ (exception) là các lỗi xảy ra trong quá trình chạy chương trình. Python xử lý ngoại lệ bằng cách sử dụng các khối try, except.\ntry: x = int(input(\u0026#34;Nhập một số: \u0026#34;)) except ValueError: print(\u0026#34;Đây không phải là số hợp lệ!\u0026#34;) try: Đoạn mã mà chúng ta muốn thực thi. except: Đoạn mã được chạy nếu có lỗi xảy ra. "
},
{
	"uri": "//localhost:1313/vi/9-object-oriented-programming/",
	"title": "Lập trình hướng đối tượng",
	"tags": [],
	"description": "",
	"content": "Lập trình hướng đối tượng (Object-Oriented Programming - OOP) là một phương pháp lập trình dựa trên khái niệm \u0026ldquo;đối tượng\u0026rdquo; (object), giúp mô phỏng các thực thể trong thế giới thực và tổ chức mã nguồn theo cách trực quan và logic hơn\nPython hỗ trợ tạo các lớp và đối tượng để biểu diễn các thực thể trong thế giới thực.\nVí dụ:\nclass Person: def __init__(self, name, age): self.name = name self.age = age def display(self): print(f\u0026#34;Name: {self.name}, Age: {self.age}\u0026#34;) # Tạo đối tượng và sử dụng person = Person(\u0026#34;Alice\u0026#34;, 25) person.display() "
},
{
	"uri": "//localhost:1313/vi/10-command-line-arguments/",
	"title": "Đối số dòng lệnh",
	"tags": [],
	"description": "",
	"content": "Đối số dòng lệnh cho phép chúng ta truyền đầu vào cho tập lệnh thông qua terminal.\nVí dụ:\nfrom sys import argv if len(argv) == 2: print(f\u0026#34;Xin chào, {argv[1]}\u0026#34;) else: print(\u0026#34;Xin chào, mọi người!\u0026#34;) argv là danh sách chứa các đối số dòng lệnh. Sử dụng sys.argv[1] để truy cập đối số đầu tiên. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]